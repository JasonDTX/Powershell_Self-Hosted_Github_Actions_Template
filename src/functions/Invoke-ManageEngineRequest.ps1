function global:Invoke-ManageEngineRequest {
    <#
    .SYNOPSIS
        Creates a new ticket in ManageEngine ServiceDesk Plus
    .DESCRIPTION
        This function is used to create a new ticket in ManageEngine ServiceDesk Plus using a REST API Call.
    .Parameter ManageEngineURI
        The URI for the ManageEngine API
    .PARAMETER AttachmentPath
        The path to the file to upload to the ticket (optional)
    .PARAMETER Config
        The configuration file for the script, must contain the following keys:
        $Config = @{
            'requester'       = '<email ID of the requester>'
            'category'        = '<category field of the ticket>'
            'impact'          = '<impact field of the ticket>'
            'subcategory'     = '<subcategory field of the ticket>'
            'urgency'         = '<urgency field of the ticket>'
            'priority'        = '<priority field of the ticket>'
            'Status'          = '<status field of the ticket>'
            'group'           = '<group to assign ticket to>'
            'requesttype'     = '<request type of the ticket>'
            'technician'      = '<email ID of the technician>'
            'subject'         = '<subject of the ticket>'
            'description'     = '<description of the ticket>'
        }
    .PARAMETER ClientId
        The client ID for the ManageEngine API
    .PARAMETER ClientSecret
        The client secret for the ManageEngine API
    .PARAMETER Scope
        The scope for the ManageEngine API
    .PARAMETER OAuthUrl
        The URL for the ManageEngine API OAuth endpoint
    .EXAMPLE
        Invoke-ManageEngineRequest -AttachmentPath "C:\Temp\file.txt" -Config $config -ClientId "xxxxxxxxxx" -ClientSecret "$([securestring]$Password | ConvertFrom-SecureString -AsPlainText)" -Scope "https://example.com/.default" -OAuthUrl "https://example.com/oauth/token" -ManageEngineUri "https://example.com/api/v3/requests"
    .NOTES
        The ClientID and ClientSecret are generated by ManageEngine and are unique to your account. 
        The Scope is the permissions that the client has to the API. 
        The OAuthUrl is the endpoint for the OAuth token. 
        The ManageEngineUri is the endpoint for the ManageEngine API.
    #>
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $false)]
        [array]$AttachmentPath,
        [Parameter(Mandatory = $true)]
        [ValidateScript({
                Try {
                    $null = $_.subject.Clone()
                    $True
                }
                Catch {
                    Throw 'Expected config key: subject.  Confirm the config is properly formatted.'
                }
            })]
        [ValidateNotNullOrEmpty()]
        [hashtable]$Config,
        [Parameter(Mandatory = $true)]
        [string]$ClientId,
        [Parameter(Mandatory = $true)]
        [string]$ClientSecret,
        [Parameter(Mandatory = $true)]
        [string]$Scope,
        [Parameter(Mandatory = $true)]
        [string]$OAuthUrl,
        [Parameter(Mandatory = $true)]
        [string]$ManageEngineUri
    )
    Begin {
        $sdpConfig = $Config

        #region TOKEN
        # This function makes a call to the OAuth endpoint to get a token
        Function Get-OAuthToken {
            <#
        .SYNOPSIS
            Connects to specified url and requests a OAUTH logon token.
        .DESCRIPTION
            Used to establish OUATH connections to Microsoft Office and other API endpoints
        .PARAMETER ClientId
            This is the API Name or ID that is associated with this service principle
        .Parameter ClientSecret
            This is the API secret assigned to the security principle
        .PARAMETER TenantName
            This is the onmicrosoft.com name of your 365 tenant - someexample.onmicrosoft.com
            You may also use the Tenant ID from portal.azure.com
        .PARAMETER Scope
            This is the base used for api permissions.
            ex https://graph.microsoft.com/.default
        .Parameter URL
            This is the token provider auth endpoint.
            ex https://login.microsoftonline.com/{TenantName}/oauth2/v2.0/token

        .EXAMPLE
            To connect to an endpoint on "oauth.example.com". Store password as secure string do not enter plain text
            Get-OAuthToken -Url "https://oauth.example.com/api/v2/oauth/tokens.json" -ClientID "xxxxxxxxxx"-ClientSecret "$([securestring]$Password | ConvertFrom-SecureString -AsPlainText)" -Scope "https://example.com/.default"

        .EXAMPLE
            To Connect to Microsoft Azure
            Get-OAuthToken -TenantName -ClientID "xxxxxxxxxx"-ClientSecret "$([securestring]$Password | ConvertFrom-SecureString -AsPlainText)"

        .Example
            To Connect to Outlook Online
            Get-OAuthToken -TenantName "example.onmicrosoft.com" -ClientID "xxxxxxxxxx"-ClientSecret "$([securestring]$Password | ConvertFrom-SecureString -AsPlainText)" -Scope "https://outlook.office365.com/.default"

            #>
            [CmdletBinding(DefaultParameterSetName = "Default")]
            param (
                [Parameter(Mandatory = $false)]
                [string]$ClientId,
                [Parameter(Mandatory = $false)]
                [string]$ClientSecret,
                [Parameter(Mandatory = $False)]
                [string]$Scope,
                [Parameter(Mandatory = $False)]
                [string]$URL
            )
            #Set SSL Version for OAUTH
            $TLS12Protocol = [System.Net.SecurityProtocolType] 'Tls12'
            [System.Net.ServicePointManager]::SecurityProtocol = $TLS12Protocol

            # Add System.Web for urlencode
            Add-Type -AssemblyName System.Web

            # Create body
            $Body = @{
                client_id     = $ClientId
                client_secret = $ClientSecret
                scope         = $Scope
                grant_type    = 'client_credentials'
            }

            # Splat the parameters for Invoke-Restmethod for cleaner code
            $PostSplat = @{
                ContentType = 'application/x-www-form-urlencoded'
                Method      = 'POST'

                # Create string by joining bodylist with '&'
                Body        = $Body
                Uri         = $Url
            }

            # Request the token!
            $Request = Invoke-RestMethod @PostSplat
            $Token = $Request.access_token
            return $Token
        }
        $OAuthSplat = @{
            ClientID     = $clientID
            ClientSecret = $clientSecret
            Scope        = $scope
            Url          = $oauthUrl
        }
        $Token = Get-OAuthToken @OAuthSplat
        #endregion TOKEN
    }

    Process {
        #Region INCIDENTHEADERS
        Write-Debug "Creating Incident"
        #Set the required headers for the API call, using the token from the OAuth call
        $headers = @{ 
            "Accept"        = "application/vnd.manageengine.sdp.v3+json"
            "Content-Type"  = "application/x-www-form-urlencoded"
            "Authorization" = "Bearer $Token"
        }
        #Create the input data for the API call
        $input_data = @{
            request = @{
                requester    = @{ email_id = $sdpConfig.Requester }
                subject      = $($sdpConfig.Subject)
            }
        }
        Switch ($sdpConfig){
            { $_.Category } { $input_data.request.category = @{ name = $sdpConfig.Category } }
            { $_.Impact }    { $input_data.request.impact = @{ name = $sdpConfig.Impact } }
            { $_.SubCategory } { $input_data.request.subcategory = @{ name = $sdpConfig.SubCategory } }
            { $_.Urgency }   { $input_data.request.urgency = @{ name = $sdpConfig.Urgency } }
            { $_.Priority }  { $input_data.request.priority = @{ name = $sdpConfig.Priority } }
            { $_.Status }    { $input_data.request.status = @{ name = $sdpConfig.Status } }
            { $_.Group }     { $input_data.request.group = @{ name = $sdpConfig.Group } }
            { $_.RequestType } { $input_data.request.request_type = @{ name = $sdpConfig.RequestType } }
            { $_.Technician }  { $input_data.request.technician = @{ email_id = $sdpConfig.Technician } }
            { $_.Description } { $input_data.request.description = $($sdpConfig.Description) }
        }

        #Convert the input data to JSON for REST
        $input_data = $input_data | ConvertTo-Json
        $data = @{ input_data = $input_data }
        #endregion INCIDENTHEADERS

        #region INCIDENT
        #Combine the headers and data into a single splat for the Invoke-RestMethod
        $IncidentSplat = @{
            Uri     = $ManageEngineUri
            Method  = 'POST'
            Headers = $headers
            Body    = $data
        }
        If (Test-Path "..\artifacts") {
            Write-Debug "Saving ticket body"
            Out-File -InputObject $IncidentSplat.Body -FilePath "..\artifacts\TicketBody.json"
        }
        $ticketResponse = Invoke-RestMethod @IncidentSplat
        #endregion INCIDENT

        ForEach ($Attachment in $AttachmentPath) {
            #region ATTACH_HEADERS
            Write-Debug "Uploading Attachment $Attachment"
            #If an attachment path is provided, upload the file to the ticket
            #This code provided by https://www.manageengine.com/products/service-desk/sdpod-v3-api/requests/request.html#add-attachment-to-a-request
            $uploadUrl = "$($ManageEngineUri)/$($TicketResponse.request.id)/_uploads"
            $filePath = "$Attachment"
            $addToAttachment = "true"
            $boundary = [System.Guid]::NewGuid().ToString()
            $headers = @{
                "Accept"        = "application/vnd.manageengine.sdp.v3+json"
                "Content-Type"  = "multipart/form-data; boundary=`"$boundary`""
                "Authorization" = "Bearer $token"
            }
            $content = [System.Text.Encoding]::GetEncoding('iso-8859-1').GetString([System.IO.File]::ReadAllBytes($filePath))
            $body = (
                "--$boundary",
                "Content-Disposition: form-data; name=`"addtoattachment`"`r`n",
                "$addtoattachment",
                "--$boundary",
                "Content-Disposition: form-data; name=`"filename`"; filename=`"$(Split-Path $filePath -Leaf)`"",
                "Content-Type: $([System.Web.MimeMapping]::GetMimeMapping($filePath))`r`n",
                $content,
                "--$boundary--`r`n"
            ) -join "`r`n"
            #endregion ATTACH_HEADERS

            #region ATTACHMENT
            $AttachmentSplat = @{
                Uri     = $uploadUrl
                Method  = 'POST'
                Headers = $headers
                Body    = $body
            }
            $attachmentResponse = Invoke-RestMethod @AttachmentSplat
            #endregion ATTACHMENT
        }
    }
    End {
        $results = @{
            "TicketResponse"     = $ticketResponse
            "AttachmentResponse" = $attachmentResponse
        }
        return $results
    }
}